---

- name: Install system package dependencies
  apt:
    state: present
    update_cache: yes
    name:
      - apparmor
      - apt-transport-https
      - ca-certificates
      - libjpeg-dev
      - libmemcached-dev
      - libxslt1-dev
      - memcached
      - nodejs
      - pandoc
      - pandoc-citeproc
      - postfix
      - vim
    install_recommends: no
  become: true

- name: Install node-gyp
  shell: "npm install -g node-gyp-install && /usr/lib/node_modules/node-gyp-install/bin.js"
  become: true

- name: Clone ctk-cli
  git:
    repo: git://github.com/cdeepakroy/ctk-cli.git
    dest: "{{ root_dir }}/ctk-cli"
    accept_hostkey: yes

    version: "{{ girder_version }}"

- name: Clone slicer_cli_web plugin
  git:
    repo: git://github.com/girder/slicer_cli_web.git
    dest: "{{ root_dir }}/slicer_cli_web"
    accept_hostkey: yes
    version: "{{ slicer_cli_web_version }}"

- name: Clone HistomicsTK
  git:
    repo: git://github.com/DigitalSlideArchive/HistomicsTK.git
    dest: "{{ root_dir }}/HistomicsTK"
    accept_hostkey: yes
    version: "{{ histomicstk_version }}"

- name: Clone large_image plugin
  git:
    repo: git://github.com/girder/large_image.git
    dest: "{{ root_dir }}/large_image"
    accept_hostkey: yes
    version: "{{ large_image_version }}"

- name: Clone DSA plugin
  git:
    repo: git://github.com/DigitalSlideArchive/digital_slide_archive.git
    dest: "{{ root_dir }}/digital_slide_archive"
    accept_hostkey: yes
    version: "{{ dsa_version }}"

- name: Get the most recent version of pip
  pip: name=pip extra_args="-U"
  become: true

- name: Install requests (needed to resolve conflict with docker-py)
  pip: name=requests version=2.10.0
  become: true

- name: Install ctk-cli using pip
  pip:
    name: "{{ root_dir }}/ctk-cli"
    extra_args: "-e"
    state: present
  become: true

- name: Create directory for build
  file: state=directory path="{{ root_dir }}/girder/clients/web/static/built"


- name: Install numpy (must be installed before large_image plugin)
  pip: name=numpy version=1.11.3
  become: true

- name: Install pylibtiff from github
  pip: name='git+https://github.com/pearu/pylibtiff@848785a6a9a4e2c6eb6f56ca9f7e8f6b32e523d5' extra_args='--force-reinstall --ignore-installed --upgrade --no-cache-dir' editable=False
  become: true

- name: Install our external girder plugins - slicer_cli_web
  command: girder-install plugin -s {{ root_dir }}/slicer_cli_web
  become: true

- name: Install our external girder plugins - large_image
  command: girder-install plugin -s {{ root_dir }}/large_image
  become: true

- name: Install our external girder plugins - HistomicsTK
  command: girder-install plugin -s {{ root_dir }}/HistomicsTK
  become: true

- name: Install our external girder plugins - digital_slide_archive
  command: girder-install plugin -s {{ root_dir }}/digital_slide_archive
  become: true

- name: Install girder-client from our source
  pip:
    chdir: "{{ girder_root }}/clients/python"
    extra_args: "-e"
    name: "."
    state: present
  become: true

- name: Install large_image via setup
  command: python setup.py install
  args:
    chdir: "{{ root_dir }}/large_image"
  become: true

- name: Set the girder configuration file
  template: src=girder.local.cfg.j2 dest={{ girder_root }}/girder/conf/girder.local.cfg

- name: Install girder server dev requirements
  pip: requirements="{{ girder_root }}/requirements-dev.txt"
  become: true

# When we are making a docker container, don't bother installing many of the
# HistomicsTK components; they will be in the actual CLI containers
- name: Install HistomicsTK pypi C requirements
  pip: requirements="{{ girder_root }}/plugins/HistomicsTK/requirements_c.txt"
  become: true
  when: docker is undefined

- name: Download miniconda install script
  get_url:
    url: https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh
    dest: "{{ root_dir }}/install_miniconda.sh"
  when: docker is undefined

- name: Run miniconda install script
  command: bash install_miniconda.sh -f -b -p ./miniconda
  args:
    chdir: "{{ root_dir }}"
  when: docker is undefined

- name: Update conda packages and add custom channel
  shell: . miniconda/bin/activate ./miniconda && conda update --yes --all && conda config --add channels https://conda.binstar.org/cdeepakroy
  args:
    chdir: "{{ root_dir }}"
    executable: /bin/bash
  when: docker is undefined

- name: Install required conda packages
  shell: . miniconda/bin/activate ./miniconda && conda install --yes anaconda-client libgfortran==1.0 setuptools==19.4 --file "{{ girder_root }}/plugins/HistomicsTK/requirements_c_conda.txt"
  args:
    chdir: "{{ root_dir }}"
    executable: /bin/bash
  when: docker is undefined

- name: Ensure we have a locally built Pillow in conda's environment
  shell: . miniconda/bin/activate ./miniconda && pip install --upgrade --no-cache-dir --force-reinstall Pillow
  args:
    chdir: "{{ root_dir }}"
    executable: /bin/bash
  when: docker is undefined

- name: Ensure setuptools 19.4 in the local pip environment, too.
  pip: name="setuptools>=19.4"
  become: true
  when: docker is undefined

- name: Work around Cryptography version
  shell: perl -pi -e 's/cryptography==/cryptography>=/g' "{{ girder_root }}/plugins/HistomicsTK/requirements_dev.txt"
  when: docker is undefined

- name: Install HistomicsTK dev requirements
  pip: requirements="{{ girder_root }}/plugins/HistomicsTK/requirements_dev.txt"
  become: true
  when: docker is undefined

# Always have a build directory
- name: Ensure build directory exists
  file:
    path: "{{ root_dir }}/build"
    owner: "{{ girder_exec_user }}"
    group: "{{ girder_exec_group }}"
    mode: 0775
    state: directory
    recurse: no
  become: true

- name: Ensure files are owned by the right user and are public
  file:
    path: "{{ root_dir }}"
    owner: "{{ girder_exec_user }}"
    group: "{{ girder_exec_group }}"
    mode: u=rwX,g=rX,o=rX
    recurse: yes
  become: true

- name: Add a script to set hosts if necessary
  template:
      src: set_hosts.py
      dest: "{{ root_dir }}/set_hosts.py"
      mode: 0744
      owner: root
  become: true
  when: docker is defined
