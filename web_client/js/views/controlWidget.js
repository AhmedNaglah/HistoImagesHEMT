histomicstk.views.ControlWidget = girder.View.extend({
    events: {
        'change': '_input',
        'changeColor': '_input',
        'click .h-select-file-button': '_selectFile'
    },

    initialize: function () {
        this.listenTo(this.model, 'change', this.render);
        this.listenTo(this.model, 'destroy', this.remove);
    },

    render: function (_, options) {
        if (options && options.norender) {
            return this;
        }
        this.$el.html(this.template()(this.model.toJSON()));
        this.$('.h-control-item[data-type="range"] input').slider();
        this.$('.h-control-item[data-type="color"] .input-group').colorpicker({});
        return this;
    },

    /**
     * Type definitions mapping used internally.  Each widget type
     * specifies it's jade template and possibly more custimizations
     * as needed.
     */
    _typedef: {
        range: {
            template: 'rangeWidget'
        },
        color: {
            template: 'colorWidget'
        },
        string: {
            template: 'widget'
        },
        number: {
            template: 'widget'
        },
        boolean: {
            template: 'booleanWidget'
        },
        'string-vector': {
            template: 'vectorWidget'
        },
        'number-vector': {
            template: 'vectorWidget'
        },
        'string-enumeration': {
            template: 'enumerationWidget'
        },
        'number-enumeration': {
            template: 'enumerationWidget'
        },
        file: {
            template: 'fileWidget'
        }
    },

    /**
     * Get the appropriate template for the model type.
     */
    template: function () {
        var type = this.model.get('type');
        var def = this._typedef[type];

        if (def === undefined) {
            console.warn('Invalid widget type "' + type + '"'); // eslint-disable-line no-console
            def = {};
        }
        return histomicstk.templates[def.template] || _.template('');
    },

    /**
     * Get the current value from an input element.
     */
    _input: function (evt) {
        var $el = $(evt.target);
        var val = $el.val();
        if ($el.attr('type') === 'checkbox') {
            val = $el.get(0).checked;
        }
        // we don't want to rerender, because this event is generated by the input element
        this.model.set('value', val, {norender: true});
    },

    _selectFile: function (evt) {
        var input = $(evt.target).closest('.input-group').find('input');
        var id = input.attr('id');
        var name = input.attr('name');
        var modal = new histomicstk.views.FileSelectorWidget({
            el: $('#g-dialog-container'),
            id: id,
            name: name,
            parentView: this
        });
        modal.on('g:saved', _.bind(function (item) {
            this.model.set('value', item.id);
            modal.$el.modal('hide');
        }, this)).render();
    }
});
